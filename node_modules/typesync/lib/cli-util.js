"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = log;
exports.success = success;
exports.error = error;
exports.spinWhile = spinWhile;
exports.parseArguments = parseArguments;
const chalk_1 = __importDefault(require("chalk"));
const ora_1 = __importDefault(require("ora"));
/**
 * Like regular console.log, but better.
 * @param message
 */
function log(message) {
    console.log(`${chalk_1.default.white('»')}  ${chalk_1.default.gray(message)}`);
}
/**
 * Makes success feel even sweeter.
 * @param text
 */
function success(text) {
    console.log(`${chalk_1.default.green('✔')}  ${chalk_1.default.white(text)}`);
}
/**
 * Logs an error all pretty.
 * @param err
 */
function error(err) {
    const msg = err instanceof Error ? err.message : err;
    const stack = err instanceof Error ? `\nStack:\n${err.stack}` : '';
    console.log(`${chalk_1.default.red('✖')}  ${chalk_1.default.bgRed(chalk_1.default.white(msg))}${stack}`);
}
/**
 * Spins while doing work. Stops when done.
 * @param text
 * @param fn
 */
async function spinWhile(text, fn) {
    const spinner = (0, ora_1.default)(' ' + chalk_1.default.gray(text)).start();
    try {
        return await fn();
    }
    finally {
        spinner.stop();
    }
}
/**
 * Super simple argument parser.
 * @param argv
 */
function parseArguments(argv) {
    const flags = {};
    const args = [];
    for (const arg of argv) {
        if (arg.startsWith('--')) {
            if (arg.includes('=')) {
                const idx = arg.indexOf('=');
                const afterEq = arg.substring(idx + 1);
                flags[arg.substring(2, idx)] = afterEq;
            }
            else {
                flags[arg.substring(2)] = true;
            }
        }
        else {
            args.push(arg);
        }
    }
    return { flags, args };
}
//# sourceMappingURL=cli-util.js.map