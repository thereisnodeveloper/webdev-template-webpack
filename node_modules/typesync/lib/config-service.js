"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfigService = createConfigService;
const path = __importStar(require("node:path"));
const cosmiconfig_1 = require("cosmiconfig");
const types_1 = require("./types");
const util_1 = require("./util");
const explorer = (0, cosmiconfig_1.cosmiconfig)('typesync');
function createConfigService() {
    return {
        readConfig: async (filePath, flags) => {
            const fileConfig = await explorer
                .search(path.dirname(filePath))
                .then(/* istanbul ignore next */ (result) => result?.config ?? {});
            const cliConfig = readCliConfig(flags);
            return { ...(0, util_1.shrinkObject)(fileConfig), ...(0, util_1.shrinkObject)(cliConfig) };
        },
    };
}
function readCliConfig(flags) {
    const readValues = (key, validator) => {
        const values = flags[key];
        return typeof values === 'string'
            ? values
                .split(',')
                .filter((value) => (validator ? validator(value) : true))
            : undefined;
    };
    return {
        ignoreDeps: readValues('ignoredeps', isIgnoreDepConfigValue),
        ignorePackages: readValues('ignorepackages'),
        ignoreProjects: readValues('ignoreprojects'),
    };
}
function isIgnoreDepConfigValue(value) {
    return Object.keys(types_1.IDependencySection).includes(value);
}
//# sourceMappingURL=config-service.js.map