"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWorkspaceResolverService = createWorkspaceResolverService;
const path = __importStar(require("node:path"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const util_1 = require("./util");
function createWorkspaceResolverService({ readFileContents, }) {
    return {
        getWorkspaces: async (packageJson, root, globber, ignored) => {
            const [manifests, ignoredWorkspaces] = await Promise.all([
                (async () => {
                    const workspaces = await getWorkspaces(packageJson, root);
                    const workspacesArray = (0, util_1.ensureWorkspacesArray)(workspaces);
                    const globbedArrays = await Promise.all(workspacesArray.map(async (workspace) => await globber.glob(root, workspace)));
                    return (0, util_1.uniq)(globbedArrays.flat());
                })(),
                (async () => {
                    const ignoredWorkspacesArrays = await Promise.all(ignored.map(async (ignoredWorkspace) => await globber.glob(root, ignoredWorkspace)));
                    return (0, util_1.uniq)(ignoredWorkspacesArrays.flat());
                })(),
            ]);
            return manifests.filter((manifest) => !ignoredWorkspaces.includes(manifest));
        },
    };
    async function getWorkspaces(packageJson, root) {
        const packageJsonWorkspaces = packageJson.workspaces;
        if (packageJsonWorkspaces !== undefined) {
            return packageJsonWorkspaces;
        }
        return await getPnpmWorkspaces(root);
    }
    async function getPnpmWorkspaces(root) {
        try {
            const filePath = path.relative(root, 'pnpm-workspace.yaml');
            const contents = await readFileContents(filePath);
            const pnpmWorkspaces = js_yaml_1.default.load(contents);
            return pnpmWorkspaces.packages;
        }
        catch {
            return undefined;
        }
    }
}
//# sourceMappingURL=workspace-resolver.js.map